<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AwaitingEmailConfirmation" xml:space="preserve">
    <value>Still awaiting email confirmation</value>
  </data>
  <data name="ConfirmationEmailSent" xml:space="preserve">
    <value>Confirmation Email has been sent to your registered Email Address.</value>
  </data>
  <data name="ConfirmEmailBody" xml:space="preserve">
    <value>Please confirm your account by clicking</value>
  </data>
  <data name="ConfirmEmailSubject" xml:space="preserve">
    <value>Confirm your account.</value>
  </data>
  <data name="InvalidAPIKey" xml:space="preserve">
    <value>Invalid API key</value>
  </data>
  <data name="LockedOut" xml:space="preserve">
    <value>This user is currently locked out</value>
  </data>
  <data name="PasswordResetEmailBody" xml:space="preserve">
    <value>Please use the following link to change your password: &lt; br /&gt; &lt;a href=\</value>
  </data>
  <data name="PasswordResetEmailSubject" xml:space="preserve">
    <value>Reset Your Password.</value>
  </data>
  <data name="RequireAPIKey" xml:space="preserve">
    <value>API Key is required</value>
  </data>
  <data name="RequireId" xml:space="preserve">
    <value>Id is required</value>
  </data>
  <data name="RequireName" xml:space="preserve">
    <value>Name is required</value>
  </data>
  <data name="RequirePassword" xml:space="preserve">
    <value>Password Required</value>
  </data>
  <data name="RequireUserName" xml:space="preserve">
    <value>UserName required</value>
  </data>
  <data name="RoleDeleted" xml:space="preserve">
    <value>Role {0} has been deleted successfully</value>
  </data>
  <data name="RoleExists" xml:space="preserve">
    <value>Role {0} already exists</value>
  </data>
  <data name="RoleForRoleIdNotExist" xml:space="preserve">
    <value>Role with role id {0} doesn't exist</value>
  </data>
  <data name="RoleNotExist" xml:space="preserve">
    <value>Role does not exist</value>
  </data>
  <data name="RoleSaved" xml:space="preserve">
    <value>Role {0} has been saved successfully</value>
  </data>
  <data name="UnauthorizedUser" xml:space="preserve">
    <value>You are not authorized for api access</value>
  </data>
  <data name="UserAuthenticated" xml:space="preserve">
    <value>User has been authenticated successfully</value>
  </data>
  <data name="UserNotExist" xml:space="preserve">
    <value>User does not exist</value>
  </data>
  <data name="UserNotExists" xml:space="preserve">
    <value>The user {0} does not exist.</value>
  </data>
  <data name="UserNotExistsOrConfirmed" xml:space="preserve">
    <value>The user {0} either does not exist or is not confirmed.</value>
  </data>
  <data name="UserOrRoleNotExist" xml:space="preserve">
    <value>Either user or role does not exist</value>
  </data>
  <data name="UserRegister" xml:space="preserve">
    <value>User has been registered.</value>
  </data>
  <data name="UserRegisterFail" xml:space="preserve">
    <value>User could not be registered.</value>
  </data>
  <data name="UserRoleDeleted" xml:space="preserve">
    <value>User role has been deleted successfully</value>
  </data>
  <data name="UserRoleExists" xml:space="preserve">
    <value>User role already exists</value>
  </data>
  <data name="UserRoleGranted" xml:space="preserve">
    <value>Role has been successfully granted to user</value>
  </data>
  <data name="PasswordResetRequest" xml:space="preserve">
    <value>You will receive an email with a link to reset your password. If you do not receive an email, please verify that the email address submitted is valid.</value>
  </data>
  <data name="PasswordDoNotMatch" xml:space="preserve">
    <value>The password and confirmation password do not match.</value>
  </data>
  <data name="InputRequired" xml:space="preserve">
    <value>Input is required.</value>
  </data>
  <data name="EmailConfirmed" xml:space="preserve">
    <value>Email has been Confirmed.</value>
  </data>
  <data name="RequireAlternateId" xml:space="preserve">
    <value>AlternateId is Required.</value>
  </data>
  <data name="RequireConfirmEmailCode" xml:space="preserve">
    <value>Code sent in confirmation Email is required.</value>
  </data>
  <data name="RequireEmail" xml:space="preserve">
    <value>Email is Required</value>
  </data>
  <data name="RequirePhoneNumber" xml:space="preserve">
    <value>PhoneNumber is Required.</value>
  </data>
  <data name="FacebookLoginSuccessful" xml:space="preserve">
    <value>Login through Facebook Account has been successfull.</value>
  </data>
  <data name="FacebookRequestUri" xml:space="preserve">
    <value>https://graph.facebook.com/debug_token?input_token={0}&amp;access_token={1}</value>
  </data>
  <data name="GmailLoginSuccessful" xml:space="preserve">
    <value>Login through Gmail Account has been succesfull.</value>
  </data>
  <data name="GoogleRequestUri" xml:space="preserve">
    <value>https://www.googleapis.com/oauth2/v1/tokeninfo?id_token={0}</value>
  </data>
  <data name="UserAccountNotExists" xml:space="preserve">
    <value>User does not have an account, prompt the user to create an account (call register api).</value>
  </data>
  <data name="NotAuthorizedSource" xml:space="preserve">
    <value>Not from an Authorized request source</value>
  </data>
</root>